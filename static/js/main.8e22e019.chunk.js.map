{"version":3,"sources":["utils/sort-utils.ts","constants.js","utils/sorting-algorithms/bubble-sort.ts","utils/sorting-algorithms/insertion-sort.ts","utils/sorting-algorithms/selection-sort.ts","components/sidebar.tsx","components/row.tsx","components/column.tsx","components/sort-visualizer.tsx","components/Visualizer.tsx","utils/random.ts","screens/home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["swap","array","indexA","indexB","temp","ROUTES","id","label","path","algorithmFn","onSwap","length","swapped","i","j","min","Sidebar","className","css","map","link","key","to","Row","children","Column","grow","SortVisualizer","frame","style","data","value","index","height","width","barStyle","Visualizer","pathname","useLocation","React","useState","setFrame","size","delay","algo","find","route","useEffect","window","document","title","numbers","push","Math","floor","random","randomNumbersArray","framesArrays","firstFrame","slice","arr","interval","setInterval","clearInterval","Home","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e22e019.chunk.js","sourcesContent":["export function swap(array: Array<any>, indexA: number, indexB: number) {\r\n    const temp = array[indexA]\r\n    array[indexA] = array[indexB]\r\n    array[indexB] = temp\r\n}","\r\nimport insertionSort from './utils/sorting-algorithms/insertion-sort'\r\nimport bubbleSort from './utils/sorting-algorithms/bubble-sort'\r\nimport selectionSort from './utils/sorting-algorithms/selection-sort'\r\n\r\nexport const ROUTES = [\r\n    { id: \"1\", label: 'Bubble sort', path: '/bubble-sort', algorithmFn: bubbleSort },\r\n    { id: \"2\", label: 'Insertion sort', path: '/insertion-sort', algorithmFn: insertionSort },\r\n    { id: \"3\", label: 'Selection sort', path: '/selection-sort', algorithmFn: selectionSort },\r\n\r\n]","import { swap } from \"../sort-utils\";\r\n\r\nexport default function bubbleSort(array: Array<number>, onSwap: Function){\r\n    let length: number = array.length;\r\n    let swapped: boolean = false;\r\n    \r\n    do {\r\n        swapped= false;\r\n        for (let i=0; i< length; i++){\r\n            if (array[i]> array[i+1]){\r\n                onSwap(array, i, i + 1)\r\n                swap(array, i, i + 1)\r\n                onSwap(array, i + 1, i)\r\n                swapped= true;\r\n            }\r\n        }\r\n    } while(swapped);\r\n    \r\n}","import { swap } from \"../sort-utils\"\r\n\r\nexport default function insertionSort(array: Array<number>, onSwap: Function) {\r\n    for (let i = 1; i < array.length; i++) {\r\n        for (let j = i; j > 0; j--) {\r\n            if (array[j] < array[j - 1]) {\r\n                onSwap(array, j, j - 1)\r\n                swap(array, j - 1, j)\r\n                onSwap(array, j - 1, j)\r\n            }\r\n        }\r\n    }\r\n}","import { swap } from \"../sort-utils\"\r\n\r\nexport default function selectionSort(array: Array<number>, onSwap: Function) {\r\n    for (let i = 0; i < array.length; i++) {\r\n        let min = i\r\n\r\n        for (let j = i + 1; j < array.length; j++) {\r\n            if (array[j] < array[min]) {\r\n                min = j\r\n            }\r\n        }\r\n\r\n        onSwap(array, min, i)\r\n        swap(array, i, min)\r\n        onSwap(array, i, min)\r\n    }\r\n}","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport { css } from 'emotion'\r\nimport { ROUTES } from '../constants'\r\n\r\nexport default function Sidebar() {\r\n\r\n    const className = css`\r\n        color: hotpink;\r\n        background-color: lightgrey;\r\n        height: 100%;\r\n        padding: 0px 20px;\r\n    `\r\n    \r\n    return (\r\n        <div className={className}>\r\n            {ROUTES.map(link => \r\n                <div key={link.id}>\r\n                    <Link to={link.path}>{link.label}</Link>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { css } from 'emotion'\r\n\r\ninterface RowProps {\r\n    children: React.ReactNode\r\n}\r\n\r\nexport default function Row({ children }: RowProps) {\r\n    const className = css`\r\n        display: flex;\r\n        flex-direction: row;\r\n        height: 100%;\r\n    `\r\n    \r\n    return (\r\n        <div className={className}>\r\n            {children}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { css } from 'emotion'\r\n\r\ninterface ColumnProps {\r\n    children: React.ReactNode,\r\n    grow?: number\r\n}\r\n\r\nexport default function Column({ children, grow = 1 }: ColumnProps) {\r\n    const className = css`\r\n        flex-grow: ${grow}\r\n    `\r\n\r\n    return (\r\n        <div className={className}>{children}</div>\r\n    )\r\n}","import React from 'react';\r\nimport { css } from 'emotion'\r\nimport { Frame } from './Visualizer'\r\n\r\ninterface SortVisualizerProps {\r\n    frame: Frame,\r\n}\r\n\r\nexport default function SortVisualizer({ frame }: SortVisualizerProps) {\r\n    const style = css`\r\n        align-items: flex-end;\r\n        background: white;\r\n        border: 5px solid black;\r\n        display: flex;\r\n        flex-direction: row;\r\n        height: 300px;\r\n    `\r\n    \r\n    const renderBars = () => frame.data.map((value, index) => {\r\n\r\n        const getBarColor = () => {\r\n            if (index === frame.indexA) {\r\n                return 'green'\r\n            }\r\n\r\n            if (index === frame.indexB) {\r\n                return 'red'\r\n            }\r\n\r\n            return 'grey'\r\n        }\r\n\r\n        const barStyle = (height: number, width: number) => css`\r\n            background: ${getBarColor()};\r\n            height: ${height}%;\r\n            width: ${width}%;\r\n        `\r\n        \r\n        const height = (value / frame.data.length) * 100\r\n        const width = (1 / frame.data.length) * 100\r\n\r\n        return (\r\n            <div \r\n                key={index} \r\n                className={barStyle(height, width)}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className={style}>\r\n            {renderBars()}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport SortVisualizer from './sort-visualizer'\r\nimport Controls from './controls'\r\nimport { randomNumbersArray } from '../utils/random'\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { ROUTES } from '../constants'\r\n\r\nconst ARRAY_MAX_SIZE = 500\r\nconst ARRAY_SIZE = 50\r\nconst DELAY = 50\r\n\r\nexport interface Frame {\r\n    data: Array<number>\r\n    indexA: number\r\n    indexB: number\r\n}\r\n\r\nexport default function Visualizer() {\r\n    let { pathname } = useLocation();\r\n    const [frame, setFrame] = React.useState<Frame>({ data: [], indexA: -1, indexB: -1 })\r\n    const [size, setSize] = React.useState<number>(ARRAY_SIZE)\r\n    const [delay, setDelay] = React.useState<number>(DELAY)\r\n    const algo =  ROUTES.find(route => route.path === pathname)\r\n\r\n\r\n\r\n    React.useEffect(() => {\r\n        if (!algo) {\r\n            return\r\n        }\r\n\r\n        window.document.title = algo.label\r\n\r\n        const array = randomNumbersArray({ length: size })\r\n        const framesArrays : Array<Frame>= []\r\n        const firstFrame: Frame = {\r\n            data: array.slice(),\r\n            indexA: -1,\r\n            indexB: -1\r\n        } \r\n        framesArrays.push(firstFrame)\r\n        function onSwap(arr: Array<number>, i: number, j: number) {\r\n            const frame: Frame = {\r\n                data: arr.slice(),\r\n                indexA: i,\r\n                indexB: j\r\n            }\r\n            framesArrays.push(frame)\r\n        }\r\n\r\n        algo.algorithmFn(array, onSwap)\r\n        setFrame(firstFrame)\r\n        let i = 0\r\n        const interval = setInterval(() => {\r\n            if (i === framesArrays.length) {\r\n                clearInterval(interval)\r\n                return\r\n            }\r\n\r\n            setFrame(framesArrays[i++])\r\n        }, delay);\r\n\r\n        return () => clearInterval(interval)\r\n\r\n    }, [algo, delay, pathname, size])\r\n\r\n    if (!algo) {\r\n        return null\r\n    }\r\n\r\n    function handleSizeChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n        if (parseInt(e.target.value) > ARRAY_MAX_SIZE) {\r\n            return false\r\n        }\r\n        \r\n        setSize(parseInt(e.target.value))\r\n    }\r\n\r\n    function handleDelayChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n        setDelay(parseInt(e.target.value))\r\n    }\r\n\r\n    return <>\r\n        <SortVisualizer frame={frame} />\r\n        {/* <form>\r\n            <label htmlFor=\"size\">\r\n                Size: <input name=\"size\" type=\"number\" value={size} onChange={handleSizeChange} min=\"1\" max={ARRAY_MAX_SIZE} />\r\n            </label>\r\n            <label htmlFor=\"delay\">\r\n                Delay: <input name=\"delay\" type=\"number\" value={delay} onChange={handleDelayChange} min=\"1\" max=\"10000\" />\r\n            </label>\r\n        </form> */}\r\n        {/* <Controls /> */}\r\n    </>\r\n} ","interface randomNumbersArrayProps { \r\n    length: number, \r\n    min?: number, \r\n}\r\n\r\nexport function randomNumbersArray({ length, min = 1 }: randomNumbersArrayProps ) {\r\n    const numbers: Array<number> = []\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        numbers.push(Math.floor(min + Math.random() * length))\r\n    }\r\n\r\n    return numbers\r\n}\r\n","import React from 'react';\r\nimport { css } from 'emotion'\r\nimport Sidebar from '../components/sidebar'\r\nimport Row from '../components/row'\r\nimport Column from '../components/column'\r\nimport Visualizer from '../components/Visualizer'\r\n\r\nexport default function Home() {\r\n    const style = css`\r\n        height: 100vh;\r\n    `\r\n\r\n    return (\r\n        <div className={style}>\r\n            <Row>\r\n                <Column>\r\n                    <Sidebar />\r\n                </Column>\r\n                <Column grow={5}>\r\n                    <Visualizer />\r\n                </Column>\r\n            </Row>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Home from './screens/home'\r\nimport {\r\n    BrowserRouter as Router,\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nexport default function App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Router>\r\n                <Home />\r\n            </Router>\r\n        </div>\r\n    );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}